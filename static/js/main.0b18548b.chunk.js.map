{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","GuessTitle","props","title","GuessGuide","guide","GuessForm","handleChange","bind","handleSubmit","event","this","onNumberChange","target","value","onNumberSubmit","count","preventDefault","onSubmit","type","onChange","React","Component","GuessNumber","state","number","handleNumberChange","handleNumberSubmit","setState","randomNumber","GuessResult","result","Math","floor","random","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdN,SAASC,EAAWC,GAClB,OACE,4BACGA,EAAMC,OAKb,SAASC,EAAWF,GAClB,OACC,2BACIA,EAAMG,O,IAKPC,E,kDACJ,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDK,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAHH,E,yDAMNE,GACXC,KAAKT,MAAMU,eAAeF,EAAMG,OAAOC,S,mCAG5BJ,GACXC,KAAKT,MAAMa,eAAeJ,KAAKT,MAAMc,MAAQ,GAC7CN,EAAMO,mB,+BAIN,OACE,0BAAMC,SAAUP,KAAKF,cACnB,gDAEE,2BACEU,KAAK,OACLC,SAAUT,KAAKJ,eACjB,2BAAOY,KAAK,SAASL,MAAM,uB,GAxBbO,IAAMC,WA+BxBC,E,kDACJ,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACXC,OAAQ,GACRT,MAAO,GAET,EAAKU,mBAAqB,EAAKA,mBAAmBlB,KAAxB,gBAC1B,EAAKmB,mBAAqB,EAAKA,mBAAmBnB,KAAxB,gBAPT,E,+DAUAiB,GACjBd,KAAKiB,SAAS,CAACH,a,yCAGET,GACjBL,KAAKiB,SAAS,CAACZ,Y,+BAIf,IAEMS,EAASd,KAAKa,MAAMC,OACpBT,EAAQL,KAAKa,MAAMR,MACnBa,EAAelB,KAAKT,MAAM2B,aAChC,OACE,oCACA,kBAAC5B,EAAD,CAAYE,MAPA,yBAQZ,kBAACC,EAAD,CAAYC,MAPA,2JAQZ,kBAAC,EAAD,CACEoB,OAAQA,EACRT,MAAOA,EACPJ,eAAgBD,KAAKe,mBACrBX,eAAgBJ,KAAKgB,qBAErB,kBAACG,EAAD,CACEd,MAAOA,EACPa,aAAcA,EACdJ,OAAQA,S,GAtCQJ,IAAMC,WA6ChC,SAASQ,EAAY5B,GACnB,IAAI6B,EASJ,OAPEA,EADE7B,EAAMuB,OAASvB,EAAM2B,aACd,gEACA3B,EAAMuB,OAASvB,EAAM2B,aACrB,mEAEA,oEAIT,kCACE,gCACE,2DAEF,2DAAiC3B,EAAMc,OACvC,2BAAIe,IAKV,IAAIF,EAAeG,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,EAErDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAaR,aAAcA,KAE7BS,SAASC,eAAe,SDQpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0b18548b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nfunction GuessTitle(props) {\n  return(\n    <h1>\n      {props.title}\n    </h1>\n  )\n}\n\nfunction GuessGuide(props) {\n  return(\n   <p>\n      {props.guide}\n   </p>\n  )\n}\n\nclass GuessForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n  \n  handleChange(event) {\n    this.props.onNumberChange(event.target.value)\n  }\n  \n  handleSubmit(event) {\n    this.props.onNumberSubmit(this.props.count + 1)\n    event.preventDefault()\n  }\n  \n  render() {\n    return(\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Enter a guess:\n          <input \n            type=\"text\"\n            onChange={this.handleChange} />\n          <input type=\"submit\" value=\"Guess Submit\" />\n        </label>\n      </form>\n    )\n  }\n}\n\nclass GuessNumber extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      number: '',\n      count: 0\n    }\n    this.handleNumberChange = this.handleNumberChange.bind(this)\n    this.handleNumberSubmit = this.handleNumberSubmit.bind(this)\n  }\n  \n  handleNumberChange(number) {\n    this.setState({number})\n  }\n  \n  handleNumberSubmit(count) {\n    this.setState({count})\n  }\n\n  render() {\n    const title = \"Number Guessing Game\"\n    const guide = \"We have selected a random number between 1 and 100. see if you can guess it in 10 turns or less, we'll tell you if your guess was too high or too low.\"\n    const number = this.state.number\n    const count = this.state.count\n    const randomNumber = this.props.randomNumber\n    return(\n      <>\n      <GuessTitle title={title} />\n      <GuessGuide guide={guide} />\n      <GuessForm\n        number={number}\n        count={count}\n        onNumberChange={this.handleNumberChange}\n        onNumberSubmit={this.handleNumberSubmit}\n        />\n        <GuessResult\n          count={count}\n          randomNumber={randomNumber}\n          number={number}\n        />\n      </>\n    )\n  }\n}\n\nfunction GuessResult(props) {\n  let result\n  if (props.number > props.randomNumber ) {\n    result = <h3> Your Guess was greater than it!</h3>\n  } else if (props.number < props.randomNumber) {\n    result = <h3>Your Guess Number was less than it!</h3>\n  } else {\n    result = <h3>Congratulation, Your Guess is Right!</h3>\n  }\n  \n  return(\n    <fieldset>\n      <legend>\n        <h2>Your Guess Number Result: </h2>\n      </legend>\n      <h4>Your Guess number of Turns: {props.count}</h4>\n      <p>{result}</p>\n    </fieldset>\n  )\n}\n\nlet randomNumber = Math.floor(Math.random() * 100) + 1\n\nReactDOM.render(\n  <React.StrictMode>\n    <GuessNumber randomNumber={randomNumber} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}